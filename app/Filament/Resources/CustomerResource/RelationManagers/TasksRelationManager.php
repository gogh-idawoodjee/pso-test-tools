<?php

namespace App\Filament\Resources\CustomerResource\RelationManagers;

use App\Enums\TaskStatus;
use App\Models\Environment;
use App\Models\Task;

use App\Traits\FormTrait;

use Filament\Forms\Components\Actions;
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\DateTimePicker;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Resources\RelationManagers\RelationManager;
use Filament\Tables;
use Filament\Tables\Actions\ActionGroup;
use Filament\Tables\Table;
use Illuminate\Support\Carbon;
use Override;

class TasksRelationManager extends RelationManager
{

    use FormTrait;

    protected static string $relationship = 'tasks';


    #[Override] public function isReadOnly(): bool
    {
        parent::isReadOnly();
        return false; // TODO: Change the autogenerated stub
    }

    #[Override] public function form(Form $form): Form
    {
        return $form
            ->schema(Task::getForm());
    }

    #[Override] public function table(Table $table): Table
    {
        return $table
            ->recordTitleAttribute('friendly_id')
            ->columns([
                Tables\Columns\TextColumn::make('friendly_id')
                    ->label('Task ID')
                    ->searchable()
                    ->sortable(),

                Tables\Columns\TextColumn::make('taskType.name')
                    ->label('Task Type')
                    ->sortable()
                    ->searchable(),

                Tables\Columns\TextColumn::make('status')
                    ->label('Status')
                    ->formatStateUsing(fn(int $state) => TaskStatus::tryFrom($state)?->getLabel())
                    ->badge()
                    ->color(static fn(int $state) => match (TaskStatus::tryFrom($state)) {
                        TaskStatus::IGNORE => 'gray',
                        TaskStatus::UNALLOCATED, TaskStatus::ALLOCATED => 'warning',
                        TaskStatus::FOLLOW_ON, TaskStatus::COMMITTED, TaskStatus::SENT, TaskStatus::DOWNLOADED => 'info',
                        TaskStatus::ACCEPTED, TaskStatus::TRAVELLING, TaskStatus::WAITING, TaskStatus::ON_SITE => 'primary',
                        TaskStatus::PENDING_COMPLETION, TaskStatus::VISIT_COMPLETE => 'secondary',
                        TaskStatus::COMPLETED => 'success',
                        TaskStatus::INCOMPLETE => 'danger',
                        default => null,
                    }),

                Tables\Columns\TextColumn::make('appt_window_start')
                    ->label('Start')
                    ->dateTime('M d, Y H:i')
                    ->sortable(),

                Tables\Columns\TextColumn::make('appt_window_finish')
                    ->label('Finish')
                    ->dateTime('M d, Y H:i')
                    ->sortable(),

                Tables\Columns\TextColumn::make('duration')
                    ->suffix(' min')
                    ->alignEnd()
                    ->sortable(),
            ])
            ->filters([
                // Add if needed later
            ])
            ->headerActions([
                Tables\Actions\CreateAction::make()
                    ->slideOver()
                    ->label('Create Task'),
            ])
            ->actions([
                ActionGroup::make([
                    Tables\Actions\EditAction::make(),
                    Tables\Actions\DeleteAction::make(),
                    Tables\Actions\Action::make('bookOrRebook')
                        ->label(fn(Task $record) => $record->appt_window_start ? 'Rebook' : 'Book')
                        ->icon('heroicon-o-calendar')
                        ->color(fn(Task $record) => $record->appt_window_start ? 'warning' : 'primary')
                        ->slideOver()
                        ->visible(fn(Task $record) => !in_array(
                            TaskStatus::tryFrom($record->status),
                            TaskStatus::endStateStatuses(),
                            true
                        ))
                        ->form(function (Task $record) {
                            if (!$this->environments) {
                                $this->environments = Environment::with('datasets')->get();
                            }
                            $this->isAuthenticationRequired = true;
                            $priority = $record->priority ?? $record->taskType?->priority;
                            $baseValue = $record->base_value ?? $record->taskType?->base_value;

                            return [
                                ...$this->getEnvFormSchema(),

                                Section::make('Appointment Search')
                                    ->statePath('data') // ðŸ‘ˆ This nests everything under $data['data']
                                    ->schema([
                                        Select::make('appointmentTemplateId')
                                            ->label('Appointment Template')
                                            ->options([]) // TODO
                                            ->required(),

                                        Select::make('slotUsageRuleId')
                                            ->label('Slot Usage Rule')
                                            ->options([]) // TODO
                                            ->required(),

                                        TextInput::make('baseValue')
                                            ->label('Base Value')
                                            ->numeric()
                                            ->default($baseValue)
                                            ->required(),

                                        TextInput::make('priority')
                                            ->label('Priority')
                                            ->numeric()
                                            ->default($priority)
                                            ->required(),

                                        DateTimePicker::make('slaStart')
                                            ->label('SLA Start')
                                            ->default(now())
                                            ->required()
                                            ->live() // ðŸ‘ˆ makes it reactive
                                            ->afterStateUpdated(function (callable $set, $state) {
                                                if ($state) {
                                                    $set('slaEnd', Carbon::parse($state)->addDays(21)->toIso8601String());
                                                }
                                            }),

                                        Hidden::make('slaEnd')
                                            ->dehydrated() // ensure it gets submitted
                                            ->afterStateHydrated(function (callable $set, $state) {
                                                // Hydrate initial value on form load
                                                $set('slaEnd', Carbon::parse($state)->addDays(21)->toIso8601String());
                                            })
                                            ->visible(false), // optional â€” forces hiding if needed


                                        Hidden::make('activityId')->default($record->id),
                                        Hidden::make('taskTypeId')->default($record->task_type_id),
                                        Hidden::make('duration')->default($record->duration),
                                        Hidden::make('lat')->default($record->lat),
                                        Hidden::make('long')->default($record->long),
                                        Hidden::make('slaTypeId')->default('Appointment'),
                                        Hidden::make('appointmentTemplateDuration')->default(21),
                                        Hidden::make('appointmentTemplateDatetime')
                                            ->default(now()->toIso8601String()),

                                        Hidden::make('appointmentBaseDate')
                                            ->default(now()->startOfDay()->toIso8601String()),
                                        
                                        Actions::make([
                                            Action::make('getAppointments')
                                                ->label('Get Appointments')
                                                ->action('fetchAvailableSlots')
                                                ->color('primary'),
                                        ]),
                                    ])
                                    ->columns(),

                            ];
                        })
                        ->action(static function (Task $record, array $data) {
                            // Eventually: store selected appt window, trigger API call, etc.
//                        ray('submitted booking form', $data);
                        }),


                ])])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }
}
